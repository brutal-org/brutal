#include <libcompression/CRC.h>

#include "tests/Driver.h"

TEST(crc32_test_single)
{
    uint8_t testdata[] = {
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
        0x08, 0x00, 0x00, 0x00, 0x00, 0x56, 0x11, 0x25, 0x28, 0x00, 0x00, 0x00,
        0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x01, 0x86, 0xa0, 0x31, 0xe8, 0x96,
        0x5f, 0x00, 0x00, 0x00, 0x41, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x63,
        0x64, 0x60, 0x24, 0x00, 0x14, 0x08, 0xc8, 0xb3, 0x0c, 0x05, 0x05, 0x8c,
        0x0f, 0x08, 0x29, 0xf8, 0xf7, 0x1f, 0x3f, 0x60, 0x79, 0x30, 0x1c, 0x14,
        0x30, 0xca, 0x11, 0x90, 0x67, 0x64, 0xa2, 0x79, 0x5c, 0x0c, 0x06, 0x05,
        0x8c, 0x8f, 0xf0, 0xca, 0xfe, 0xff, 0xcf, 0xf8, 0x87, 0xe6, 0x71, 0x31,
        0x18, 0x14, 0x30, 0xca, 0xe0, 0x95, 0x65, 0x64, 0x04, 0x00, 0x50, 0xe5,
        0xfe, 0x71, 0x35, 0xe2, 0xd8, 0x59, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
        0x4e, 0x44, 0xae, 0x42, 0x60, 0x82};

    Compression::CRC checksum(0);

    checksum.add(testdata, sizeof(testdata));

    Assert::equal(checksum.checksum(), 0xd1562c0f);
}

TEST(crc32_test_many)
{
    uint8_t testdata[] = {
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
        0x08, 0x00, 0x00, 0x00, 0x00, 0x56, 0x11, 0x25, 0x28, 0x00, 0x00, 0x00,
        0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x01, 0x86, 0xa0, 0x31, 0xe8, 0x96,
        0x5f, 0x00, 0x00, 0x00, 0x41, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x63,
        0x64, 0x60, 0x24, 0x00, 0x14, 0x08, 0xc8, 0xb3, 0x0c, 0x05, 0x05, 0x8c,
        0x0f, 0x08, 0x29, 0xf8, 0xf7, 0x1f, 0x3f, 0x60, 0x79, 0x30, 0x1c, 0x14,
        0x30, 0xca, 0x11, 0x90, 0x67, 0x64, 0xa2, 0x79, 0x5c, 0x0c, 0x06, 0x05,
        0x8c, 0x8f, 0xf0, 0xca, 0xfe, 0xff, 0xcf, 0xf8, 0x87, 0xe6, 0x71, 0x31,
        0x18, 0x14, 0x30, 0xca, 0xe0, 0x95, 0x65, 0x64, 0x04, 0x00, 0x50, 0xe5,
        0xfe, 0x71, 0x35, 0xe2, 0xd8, 0x59, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
        0x4e, 0x44, 0xae, 0x42, 0x60, 0x82};

    Compression::CRC checksum(0);

    for (const uint8_t &byte : testdata)
    {
        checksum.add(&byte, sizeof(uint8_t));
    }

    Assert::equal(checksum.checksum(), 0xd1562c0f);
}