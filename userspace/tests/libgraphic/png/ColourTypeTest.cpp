#include <libpng/Reader.h>

#include "tests/Driver.h"

// Testdata from http://www.schaik.com/pngsuite/pngsuite_bas_png.html

TEST(pngreader_colourtype_8bit_grayscale)
{
    uint8_t basn0g08[] = {
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
        0x08, 0x00, 0x00, 0x00, 0x00, 0x56, 0x11, 0x25, 0x28, 0x00, 0x00, 0x00,
        0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x01, 0x86, 0xa0, 0x31, 0xe8, 0x96,
        0x5f, 0x00, 0x00, 0x00, 0x41, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x63,
        0x64, 0x60, 0x24, 0x00, 0x14, 0x08, 0xc8, 0xb3, 0x0c, 0x05, 0x05, 0x8c,
        0x0f, 0x08, 0x29, 0xf8, 0xf7, 0x1f, 0x3f, 0x60, 0x79, 0x30, 0x1c, 0x14,
        0x30, 0xca, 0x11, 0x90, 0x67, 0x64, 0xa2, 0x79, 0x5c, 0x0c, 0x06, 0x05,
        0x8c, 0x8f, 0xf0, 0xca, 0xfe, 0xff, 0xcf, 0xf8, 0x87, 0xe6, 0x71, 0x31,
        0x18, 0x14, 0x30, 0xca, 0xe0, 0x95, 0x65, 0x64, 0x04, 0x00, 0x50, 0xe5,
        0xfe, 0x71, 0x35, 0xe2, 0xd8, 0x59, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
        0x4e, 0x44, 0xae, 0x42, 0x60, 0x82};

    IO::MemoryReader mem_reader(basn0g08, sizeof(basn0g08));
    Png::Reader png_reader(mem_reader);
    Assert::truth(png_reader.valid());
    Assert::equal(png_reader.width(), 32);
    Assert::equal(png_reader.height(), 32);
}

TEST(pngreader_colourtype_8bit_grayscale_alpha)
{
    uint8_t basn4a08[] = {
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
        0x08, 0x04, 0x00, 0x00, 0x00, 0xd9, 0x73, 0xb2, 0x7f, 0x00, 0x00, 0x00,
        0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x01, 0x86, 0xa0, 0x31, 0xe8, 0x96,
        0x5f, 0x00, 0x00, 0x00, 0x35, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x63,
        0xfc, 0xcf, 0xc0, 0xc0, 0x01, 0x85, 0x9c, 0x68, 0x34, 0x31, 0x22, 0x9c,
        0x2c, 0xdf, 0x19, 0x28, 0x03, 0x2c, 0x3f, 0x86, 0xbe, 0x01, 0xa3, 0x61,
        0x30, 0x1a, 0x06, 0x54, 0x31, 0x60, 0x34, 0x10, 0x47, 0xc3, 0x80, 0x2a,
        0x06, 0x8c, 0x06, 0xe2, 0x68, 0x18, 0x50, 0xc3, 0x00, 0x00, 0xdf, 0x2a,
        0x20, 0x7d, 0xc4, 0xeb, 0x85, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
        0x4e, 0x44, 0xae, 0x42, 0x60, 0x82};

    IO::MemoryReader mem_reader(basn4a08, sizeof(basn4a08));
    Png::Reader png_reader(mem_reader);
    Assert::truth(png_reader.valid());
    Assert::equal(png_reader.width(), 32);
    Assert::equal(png_reader.height(), 32);
}

TEST(pngreader_colourtype_8bit_rgb)
{
    uint8_t basn2c08[] = {
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
        0x08, 0x02, 0x00, 0x00, 0x00, 0xfc, 0x18, 0xed, 0xa3, 0x00, 0x00, 0x00,
        0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x01, 0x86, 0xa0, 0x31, 0xe8, 0x96,
        0x5f, 0x00, 0x00, 0x00, 0x48, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xed,
        0xd5, 0xc1, 0x09, 0x00, 0x30, 0x0c, 0x02, 0x40, 0x85, 0xec, 0x91, 0xfd,
        0xb7, 0x72, 0x13, 0x3b, 0x44, 0x2b, 0xf4, 0xa1, 0xf8, 0xce, 0xe1, 0x2b,
        0xb4, 0x0d, 0x04, 0x3b, 0x80, 0x0a, 0x14, 0xf8, 0x1c, 0xa0, 0xed, 0xe4,
        0x7d, 0x4c, 0x78, 0x40, 0x81, 0x02, 0x0f, 0x4a, 0x87, 0x1f, 0xc2, 0x84,
        0x07, 0x14, 0x28, 0xf0, 0xa0, 0x74, 0x38, 0x23, 0xa9, 0x40, 0x81, 0xbb,
        0x70, 0x77, 0xa3, 0xc0, 0x01, 0x82, 0xb1, 0xf9, 0x5e, 0x0f, 0x40, 0xcf,
        0x4b, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60,
        0x82};

    IO::MemoryReader mem_reader(basn2c08, sizeof(basn2c08));
    Png::Reader png_reader(mem_reader);
    Assert::truth(png_reader.valid());
    Assert::equal(png_reader.width(), 32);
    Assert::equal(png_reader.height(), 32);
}

TEST(pngreader_colourtype_8bit_rgb_alpha)
{
    uint8_t basn6a08[] = {
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
        0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a, 0xf4, 0x00, 0x00, 0x00,
        0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x01, 0x86, 0xa0, 0x31, 0xe8, 0x96,
        0x5f, 0x00, 0x00, 0x00, 0x6f, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xed,
        0xd6, 0x31, 0x0a, 0x80, 0x30, 0x0c, 0x46, 0xe1, 0x27, 0x64, 0x68, 0x4f,
        0xa1, 0xf7, 0x3f, 0x55, 0x04, 0x8f, 0x21, 0xc4, 0xdd, 0xc5, 0x45, 0x78,
        0x1d, 0x52, 0xe8, 0x50, 0x28, 0xfc, 0x1f, 0x4d, 0x28, 0xd9, 0x8a, 0x01,
        0x30, 0x5e, 0x7b, 0x7e, 0x9c, 0xff, 0xba, 0x33, 0x83, 0x1d, 0x75, 0x05,
        0x47, 0x03, 0xca, 0x06, 0xa8, 0xf9, 0x0d, 0x58, 0xa0, 0x07, 0x4e, 0x35,
        0x1e, 0x22, 0x7d, 0x80, 0x5c, 0x82, 0x54, 0xe3, 0x1b, 0xb0, 0x42, 0x0f,
        0x5c, 0xdc, 0x2e, 0x00, 0x79, 0x20, 0x88, 0x92, 0xff, 0xe2, 0xa0, 0x01,
        0x36, 0xa0, 0x7b, 0x40, 0x07, 0x94, 0x3c, 0x10, 0x04, 0xd9, 0x00, 0x19,
        0x50, 0x36, 0x40, 0x7f, 0x01, 0x1b, 0xf0, 0x00, 0x52, 0x20, 0x1a, 0x9c,
        0x16, 0x0f, 0xb8, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44,
        0xae, 0x42, 0x60, 0x82};

    IO::MemoryReader mem_reader(basn6a08, sizeof(basn6a08));
    Png::Reader png_reader(mem_reader);
    Assert::truth(png_reader.valid());
    Assert::equal(png_reader.width(), 32);
    Assert::equal(png_reader.height(), 32);
}

TEST(pngreader_colourtype_8bit_rgb_palette)
{
    uint8_t basn3p08[] = {
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
        0x08, 0x03, 0x00, 0x00, 0x00, 0x44, 0xa4, 0x8a, 0xc6, 0x00, 0x00, 0x00,
        0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x01, 0x86, 0xa0, 0x31, 0xe8, 0x96,
        0x5f, 0x00, 0x00, 0x03, 0x00, 0x50, 0x4c, 0x54, 0x45, 0x22, 0x44, 0x00,
        0xf5, 0xff, 0xed, 0x77, 0xff, 0x77, 0xcb, 0xff, 0xff, 0x11, 0x0a, 0x00,
        0x3a, 0x77, 0x00, 0x22, 0x22, 0xff, 0xff, 0x11, 0xff, 0x11, 0x00, 0x00,
        0x22, 0x22, 0x00, 0xff, 0xac, 0x55, 0x66, 0xff, 0x66, 0xff, 0x66, 0x66,
        0xff, 0x01, 0xff, 0x22, 0x12, 0x00, 0xdc, 0xff, 0xff, 0xcc, 0xff, 0x99,
        0x44, 0x44, 0xff, 0x00, 0x55, 0x55, 0x22, 0x00, 0x00, 0xcb, 0xcb, 0xff,
        0x44, 0x44, 0x00, 0x55, 0xff, 0x55, 0xcb, 0xcb, 0x00, 0x33, 0x1a, 0x00,
        0xff, 0xec, 0xdc, 0xed, 0xff, 0xff, 0xe4, 0xff, 0xcb, 0xff, 0xdc, 0xdc,
        0x44, 0xff, 0x44, 0x66, 0x66, 0xff, 0x33, 0x00, 0x00, 0x44, 0x22, 0x00,
        0xed, 0xed, 0xff, 0x66, 0x66, 0x00, 0xff, 0xa4, 0x44, 0xff, 0xff, 0xaa,
        0xed, 0xed, 0x00, 0x00, 0xcb, 0xcb, 0xfe, 0xff, 0xff, 0xfd, 0xff, 0xfe,
        0xff, 0xff, 0x01, 0x33, 0xff, 0x33, 0x55, 0x2a, 0x00, 0x01, 0x01, 0xff,
        0x88, 0x88, 0xff, 0x00, 0xaa, 0xaa, 0x01, 0x01, 0x00, 0x44, 0x00, 0x00,
        0x88, 0x88, 0x00, 0xff, 0xe4, 0xcb, 0xba, 0x5b, 0x00, 0x22, 0xff, 0x22,
        0x66, 0x32, 0x00, 0xff, 0xff, 0x99, 0xaa, 0xaa, 0xff, 0x55, 0x00, 0x00,
        0xaa, 0xaa, 0x00, 0xcb, 0x63, 0x00, 0x11, 0xff, 0x11, 0xd4, 0xff, 0xaa,
        0x77, 0x3a, 0x00, 0xff, 0x44, 0x44, 0xdc, 0x6b, 0x00, 0x66, 0x00, 0x00,
        0x01, 0xff, 0x01, 0x88, 0x42, 0x00, 0xec, 0xff, 0xdc, 0x6b, 0xdc, 0x00,
        0xff, 0xdc, 0xba, 0x00, 0x33, 0x33, 0x00, 0xed, 0x00, 0xed, 0x73, 0x00,
        0xff, 0xff, 0x88, 0x99, 0x4a, 0x00, 0x11, 0xff, 0xff, 0x77, 0x00, 0x00,
        0xff, 0x83, 0x01, 0xff, 0xba, 0xba, 0xfe, 0x7b, 0x00, 0xff, 0xfe, 0xff,
        0x00, 0xcb, 0x00, 0xff, 0x99, 0x99, 0x22, 0xff, 0xff, 0x88, 0x00, 0x00,
        0xff, 0xff, 0x77, 0x00, 0x88, 0x88, 0xff, 0xdc, 0xff, 0x1a, 0x33, 0x00,
        0x00, 0x00, 0xaa, 0x33, 0xff, 0xff, 0x00, 0x99, 0x00, 0x99, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x32, 0x66, 0x00, 0xff, 0xba, 0xff, 0x44, 0xff, 0xff,
        0xff, 0xaa, 0xff, 0x00, 0x77, 0x00, 0x00, 0xfe, 0xfe, 0xaa, 0x00, 0x00,
        0x4a, 0x99, 0x00, 0xff, 0xff, 0x66, 0xff, 0x22, 0x22, 0x00, 0x00, 0x99,
        0x8b, 0xff, 0x11, 0x55, 0xff, 0xff, 0xff, 0x01, 0x01, 0xff, 0x88, 0xff,
        0x00, 0x55, 0x00, 0x00, 0x11, 0x11, 0xff, 0xff, 0xfe, 0xff, 0xfd, 0xfe,
        0xa4, 0xff, 0x44, 0x66, 0xff, 0xff, 0xff, 0x66, 0xff, 0x00, 0x33, 0x00,
        0xff, 0xff, 0x55, 0xff, 0x77, 0x77, 0x00, 0x00, 0x88, 0xff, 0x44, 0xff,
        0x00, 0x11, 0x00, 0x77, 0xff, 0xff, 0x00, 0x66, 0x66, 0xff, 0xff, 0xed,
        0x00, 0x01, 0x00, 0xff, 0xf5, 0xed, 0x11, 0x11, 0xff, 0xff, 0xff, 0x44,
        0xff, 0x22, 0xff, 0xff, 0xed, 0xed, 0x11, 0x11, 0x00, 0x88, 0xff, 0xff,
        0x00, 0x00, 0x77, 0x93, 0xff, 0x22, 0x00, 0xdc, 0xdc, 0x33, 0x33, 0xff,
        0xfe, 0x00, 0xfe, 0xba, 0xba, 0xff, 0x99, 0xff, 0xff, 0x33, 0x33, 0x00,
        0x63, 0xcb, 0x00, 0xba, 0xba, 0x00, 0xac, 0xff, 0x55, 0xff, 0xff, 0xdc,
        0xff, 0xff, 0x33, 0x7b, 0xfe, 0x00, 0xed, 0x00, 0xed, 0x55, 0x55, 0xff,
        0xaa, 0xff, 0xff, 0xdc, 0xdc, 0xff, 0x55, 0x55, 0x00, 0x00, 0x00, 0x66,
        0xdc, 0xdc, 0x00, 0xdc, 0x00, 0xdc, 0x83, 0xff, 0x01, 0x77, 0x77, 0xff,
        0xfe, 0xfe, 0xff, 0xff, 0xff, 0xcb, 0xff, 0x55, 0x55, 0x77, 0x77, 0x00,
        0xfe, 0xfe, 0x00, 0xcb, 0x00, 0xcb, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
        0x01, 0x00, 0x00, 0x12, 0x22, 0x00, 0xff, 0xff, 0x22, 0x00, 0x44, 0x44,
        0x9b, 0xff, 0x33, 0xff, 0xd4, 0xaa, 0x00, 0x00, 0x55, 0x99, 0x99, 0xff,
        0x99, 0x99, 0x00, 0xba, 0x00, 0xba, 0x2a, 0x55, 0x00, 0xff, 0xcb, 0xcb,
        0xb4, 0xff, 0x66, 0xff, 0x9b, 0x33, 0xff, 0xff, 0xba, 0xaa, 0x00, 0xaa,
        0x42, 0x88, 0x00, 0x53, 0xaa, 0x00, 0xff, 0xaa, 0xaa, 0x00, 0x00, 0xed,
        0x00, 0xba, 0xba, 0xff, 0xff, 0x11, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x44,
        0x00, 0x99, 0x99, 0x99, 0x00, 0x99, 0xff, 0xcc, 0x99, 0xba, 0x00, 0x00,
        0x88, 0x00, 0x88, 0x00, 0xdc, 0x00, 0xff, 0x93, 0x22, 0x00, 0x00, 0xdc,
        0xfe, 0xff, 0xfe, 0xaa, 0x53, 0x00, 0x77, 0x00, 0x77, 0x02, 0x01, 0x00,
        0xcb, 0x00, 0x00, 0x00, 0x00, 0x33, 0xff, 0xed, 0xff, 0x00, 0xba, 0x00,
        0xff, 0x33, 0x33, 0xed, 0xff, 0xed, 0xff, 0xc4, 0x88, 0xbc, 0xff, 0x77,
        0x00, 0xaa, 0x00, 0x66, 0x00, 0x66, 0x00, 0x22, 0x22, 0xdc, 0x00, 0x00,
        0xff, 0xcb, 0xff, 0xdc, 0xff, 0xdc, 0xff, 0x8b, 0x11, 0x00, 0x00, 0xcb,
        0x00, 0x01, 0x01, 0x55, 0x00, 0x55, 0x00, 0x88, 0x00, 0x00, 0x00, 0x22,
        0x01, 0xff, 0xff, 0xcb, 0xff, 0xcb, 0xed, 0x00, 0x00, 0xff, 0x88, 0x88,
        0x44, 0x00, 0x44, 0x5b, 0xba, 0x00, 0xff, 0xbc, 0x77, 0xff, 0x99, 0xff,
        0x00, 0x66, 0x00, 0xba, 0xff, 0xba, 0x00, 0x77, 0x77, 0x73, 0xed, 0x00,
        0xfe, 0x00, 0x00, 0x33, 0x00, 0x33, 0x00, 0x00, 0xba, 0xff, 0x77, 0xff,
        0x00, 0x44, 0x00, 0xaa, 0xff, 0xaa, 0xff, 0xfe, 0xfe, 0x00, 0x00, 0x11,
        0x22, 0x00, 0x22, 0xc4, 0xff, 0x88, 0x00, 0xed, 0xed, 0x99, 0xff, 0x99,
        0xff, 0x55, 0xff, 0x00, 0x22, 0x00, 0xff, 0xb4, 0x66, 0x11, 0x00, 0x11,
        0x0a, 0x11, 0x00, 0xff, 0x11, 0x11, 0xdc, 0xff, 0xba, 0xba, 0xff, 0xff,
        0x88, 0xff, 0x88, 0x01, 0x00, 0x01, 0xff, 0x33, 0xff, 0xb9, 0x8e, 0xd3,
        0x62, 0x00, 0x00, 0x01, 0xb1, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x0d,
        0xc1, 0x07, 0x00, 0x08, 0x04, 0x10, 0x00, 0xc0, 0x47, 0xa8, 0x8c, 0x48,
        0x64, 0x2b, 0x3b, 0x33, 0x09, 0x65, 0x6b, 0x58, 0x65, 0x67, 0xef, 0x15,
        0x8a, 0xd0, 0xb0, 0xf7, 0x2a, 0x2a, 0x34, 0x68, 0x98, 0x0d, 0xab, 0x6c,
        0xca, 0xde, 0xa3, 0x8c, 0x86, 0x9d, 0x95, 0x59, 0x32, 0xb2, 0xf7, 0xbe,
        0xbb, 0x98, 0xc2, 0xf7, 0x14, 0xe6, 0x57, 0xfa, 0xb2, 0x97, 0xa6, 0xdc,
        0x25, 0x1e, 0xe4, 0x01, 0x06, 0x73, 0x83, 0x9e, 0xbc, 0xc5, 0x79, 0xae,
        0x13, 0x69, 0x48, 0xc9, 0x43, 0x4c, 0xe5, 0x2a, 0x3b, 0x38, 0xc0, 0x05,
        0x22, 0x1b, 0xe9, 0xf9, 0x88, 0x06, 0xbc, 0x4b, 0x45, 0x36, 0x73, 0x8a,
        0x78, 0x9a, 0x27, 0x48, 0x4b, 0xf0, 0x3f, 0xd3, 0x59, 0xce, 0x11, 0xe2,
        0x39, 0xf2, 0xf3, 0x05, 0x73, 0xe8, 0xc4, 0xa3, 0xfc, 0xc8, 0x3e, 0xa2,
        0x3c, 0xc5, 0xc8, 0x4e, 0x33, 0xfe, 0xa1, 0x37, 0x5f, 0xb2, 0x9d, 0x78,
        0x95, 0x32, 0x4c, 0x26, 0x31, 0xad, 0x38, 0xc1, 0x50, 0x7e, 0x21, 0x5e,
        0xe3, 0x05, 0x8a, 0xf0, 0x13, 0xfb, 0xa9, 0x47, 0x77, 0xd6, 0x10, 0x4d,
        0xa8, 0xca, 0x2c, 0xda, 0xd2, 0x98, 0x15, 0xb4, 0x67, 0x25, 0xd1, 0x86,
        0x8d, 0x3c, 0xcf, 0xcf, 0x6c, 0xa3, 0x10, 0x0d, 0x59, 0x48, 0xac, 0xa6,
        0x28, 0x23, 0x39, 0xca, 0x56, 0x96, 0x70, 0x9a, 0xd9, 0xc4, 0x26, 0x4a,
        0xf2, 0x38, 0x1f, 0x53, 0x8b, 0xdc, 0xfc, 0xc5, 0xb7, 0xc4, 0x4e, 0xca,
        0xf1, 0x15, 0x2f, 0xb1, 0x96, 0xf7, 0x59, 0xcf, 0xd7, 0xc4, 0x21, 0x2a,
        0x93, 0x8b, 0xff, 0xa8, 0xc4, 0x25, 0x16, 0xf3, 0x19, 0x71, 0x92, 0x1a,
        0x7c, 0xc3, 0xa7, 0x2c, 0xa3, 0x35, 0xdf, 0x31, 0x9c, 0x78, 0x93, 0x6a,
        0x3c, 0xc5, 0x38, 0x2a, 0x70, 0x90, 0x02, 0xa4, 0x20, 0x6e, 0xb2, 0x87,
        0xa5, 0x74, 0xa0, 0x14, 0xaf, 0xd0, 0x9f, 0xa4, 0x44, 0x3b, 0xd6, 0x31,
        0x8d, 0x61, 0x3c, 0x4b, 0x1d, 0x92, 0x30, 0x90, 0xf8, 0x8d, 0xf9, 0x7c,
        0xc2, 0x0c, 0xf2, 0xd1, 0x88, 0x0f, 0xb8, 0x47, 0x94, 0x25, 0x07, 0x03,
        0xe8, 0x4a, 0x16, 0x5a, 0x90, 0x9a, 0x1e, 0xc4, 0x24, 0x1e, 0xe6, 0x3d,
        0x46, 0x91, 0x8e, 0x37, 0xf8, 0x9c, 0x2b, 0x44, 0x72, 0xae, 0xf1, 0x3a,
        0xf3, 0x48, 0xc6, 0xdb, 0x64, 0xe5, 0x1d, 0xa2, 0x1b, 0xc7, 0xa8, 0xcb,
        0x9f, 0x24, 0xa4, 0x17, 0xe3, 0x39, 0x43, 0x1c, 0xe6, 0x0f, 0xaa, 0x70,
        0x91, 0x3b, 0x0c, 0xa1, 0x20, 0x1d, 0x89, 0xda, 0xac, 0xa2, 0x38, 0xa9,
        0xb8, 0xcc, 0x87, 0xcc, 0xe4, 0x38, 0xb1, 0x88, 0x1f, 0xc8, 0x49, 0x69,
        0xce, 0x32, 0x86, 0x12, 0xb4, 0x24, 0xaa, 0xf3, 0x32, 0x0b, 0xb8, 0xc5,
        0xbf, 0xdc, 0x66, 0x04, 0xcd, 0x89, 0xb9, 0x3c, 0xc3, 0x44, 0x32, 0xf1,
        0x37, 0x89, 0x78, 0x8c, 0x5d, 0x44, 0x66, 0x32, 0x30, 0x9a, 0x17, 0xd9,
        0xcd, 0x23, 0x8c, 0xa5, 0x3e, 0x31, 0x88, 0x7e, 0xf4, 0x21, 0x01, 0xbf,
        0x93, 0x91, 0x27, 0xd9, 0x42, 0x9c, 0xa3, 0x0b, 0x9d, 0xc9, 0xcb, 0x06,
        0xf2, 0x30, 0x81, 0x9a, 0xdc, 0x07, 0x81, 0x1b, 0xfe, 0x10, 0x87, 0x96,
        0xc8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
        0x60, 0x82};

    IO::MemoryReader mem_reader(basn3p08, sizeof(basn3p08));
    Png::Reader png_reader(mem_reader);
    Assert::truth(png_reader.valid());
    Assert::equal(png_reader.width(), 32);
    Assert::equal(png_reader.height(), 32);
}